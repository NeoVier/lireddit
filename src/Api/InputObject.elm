-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.InputObject exposing (..)

import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildUsernamePasswordInput :
    UsernamePasswordInputRequiredFields
    -> UsernamePasswordInput
buildUsernamePasswordInput required =
    { username = required.username, email = required.email, password = required.password }


type alias UsernamePasswordInputRequiredFields =
    { username : String
    , email : String
    , password : String
    }


{-| Type for the UsernamePasswordInput input object.
-}
type alias UsernamePasswordInput =
    { username : String
    , email : String
    , password : String
    }


{-| Encode a UsernamePasswordInput into a value that can be used as an argument.
-}
encodeUsernamePasswordInput : UsernamePasswordInput -> Value
encodeUsernamePasswordInput input =
    Encode.maybeObject
        [ ( "username", Encode.string input.username |> Just ), ( "email", Encode.string input.email |> Just ), ( "password", Encode.string input.password |> Just ) ]
